{"version":3,"file":"static/js/192.77d85d0f.chunk.js","mappings":"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","sources":["components/chart/chart.styled.js","components/chart/chart.jsx","components/table/table.styled.js","components/table/table.jsx","components/diagramTab/diagramTab.styled.js","components/diagramTab/diagramTab.jsx"],"sourcesContent":["import styled from 'styled-components';\nexport const ChartWrapper = styled.div`\n  width: 280px;\n  height: 280px;\n  margin-right: 32px;\n  position: relative;\n\n  @media screen and (max-width: 767px) {\n    margin-left: auto;\n    margin-right: auto;\n    height: auto;\n    margin-bottom: 32px;\n  }\n\n  @media screen and (min-width: 768px) {\n    width: 336px;\n    height: 336px;\n  }\n\n  @media screen and (min-width: 1280px) {\n    width: 288px;\n    height: 288px;\n  }\n`;\n\nexport const ChartBalInfo = styled.span`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n\n  font-size: 18px;\n  line-height: calc(26 / 18);\n  font-weight: 700;\n`;\n","import { Chart as ChartJS, ArcElement, Tooltip } from 'chart.js';\nimport { Doughnut } from 'react-chartjs-2';\nimport { ChartWrapper, ChartBalInfo } from './chart.styled';\n\nChartJS.register(ArcElement, Tooltip);\n\nexport function Chart({ statistics }) {\n  const { totalExpenses, totalCategories } = statistics;\n  const data = {\n    labels: totalCategories.map(category => category.title),\n    datasets: [\n      {\n        label: 'Statistics',\n        data: totalCategories.map(category =>\n          category.total ? category.total : 0\n        ),\n        backgroundColor: totalCategories.map(category => category.color),\n        borderWidth: 0,\n        cutout: '65%',\n      },\n    ],\n  };\n  return (\n    <>\n      <ChartWrapper>\n        <Doughnut data={data} />\n        <ChartBalInfo>{` â‚´ ${totalExpenses}`}</ChartBalInfo>\n      </ChartWrapper>\n    </>\n  );\n}\n","import styled from 'styled-components';\nimport { Form } from 'formik';\nimport { Select } from 'react-dropdown-select';\n\nexport const Tabl = styled.table`\n  width: 100%;\n  border-collapse: collapse;\n  text-align: left;\n  margin-bottom: 16px;\n`;\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  gap: 20px;\n  margin-bottom: 20px;\n  margin-left: 0;\n  margin-right: auto;\n\n  @media screen and (max-width: 767px) {\n    flex-direction: column;\n  }\n`;\n\nexport const StyledField = styled(Select)`\n  &.react-dropdown-select {\n    position: relative;\n    height: 50px;\n    background-color: transparent;\n    border: 1px solid #000;\n    border-radius: 30px;\n    font-family: 'Circe';\n    font-weight: 400;\n    font-size: 16px;\n    line-height: 24px;\n    padding: 0 20px 0 20px;\n    color: #000;\n\n    &::after {\n      content: '';\n      position: absolute;\n      top: 50%;\n      right: 10px;\n      display: block;\n      width: 12px;\n      height: 12px;\n      border-top: 1px solid;\n      border-left: 1px solid;\n      transform: rotate(-135deg) translateY(-50%);\n      transform-origin: 0 0;\n    }\n  }\n\n  .react-dropdown-select-dropdown-handle {\n    position: absolute;\n    visibility: hidden;\n  }\n`;\n\nexport const TabHeader = styled.th`\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 18px;\n  line-height: 27px;\n  padding: 0 28px;\n\n  @media screen and (max-width: 767px) {\n    padding: 0 20px;\n  }\n`;\n\nexport const TableHead = styled.thead`\n  border-radius: 30px;\n  display: table-header-group;\n  vertical-align: middle;\n  border-color: inherit;\n`;\nexport const TableHeadTr = styled.tr`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  font-size: 18px;\n  line-height: 27px;\n  border-radius: 30px;\n  height: 58px;\n  background-color: var(--primary-background-color);\n\n  @media screen and (max-width: 767px) {\n    width: 100%;\n  }\n`;\nexport const Tabrow = styled.td`\n  display: inline-flex;\n  align-items: center;\n  padding-top: 15px;\n  padding-bottom: 15px;\n`;\n\nexport const Total = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding: 0px 30px 15px 30px;\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 700;\n  font-size: 16px;\n  line-height: 24px;\n`;\nexport const TotalExpenses = styled.span`\n  color: #ff6596;\n`;\nexport const TotalIncome = styled.span`\n  color: #24cca7;\n`;\nexport const TableBody = styled.tbody``;\n\nexport const BodyTr = styled.tr`\n  padding: 0 28px;\n  justify-content: space-between;\n  display: flex;\n  border-bottom: 1px solid #dcdcdf;\n  box-shadow: 0px 1px 0px rgb(255 255 255 / 60%);\n\n  @media screen and (max-width: 767px) {\n    padding: 0 20px;\n  }\n`;\nexport const BodyText = styled.span`\n  padding: 0 0px 0 16px;\n  justify-content: space-between;\n  display: flex;\n  font-family: 'Circe';\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 24px;\n`;\nexport const FieldContainer = styled.div`\n  position: relative;\n  width: 50%;\n\n  @media screen and (max-width: 767px) {\n    width: 100%;\n  }\n`;\n\nexport const TableContainer = styled.div`\n  flex-grow: 1;\n`;\n","import { Formik, ErrorMessage } from 'formik';\nimport {\n  Total,\n  Tabrow,\n  TabHeader,\n  Tabl,\n  StyledForm,\n  StyledField,\n  TableHead,\n  TableHeadTr,\n  TableBody,\n  BodyTr,\n  BodyText,\n  FieldContainer,\n  TableContainer,\n  TotalExpenses,\n  TotalIncome,\n} from './table.styled';\n\nexport function Table({\n  month,\n  year,\n  initialValues,\n  statistics,\n  onMonthChange,\n  onYearChange,\n  isSuccess,\n}) {\n  const { totalExpenses, totalIncome, totalCategories } = statistics;\n\n  const options = [\n    { name: 'January', value: 1 },\n    { name: 'February', value: 2 },\n    { name: 'March', value: 3 },\n    { name: 'April', value: 4 },\n    { name: 'May', value: 5 },\n    { name: 'June', value: 6 },\n    { name: 'July', value: 7 },\n    { name: 'August', value: 8 },\n    { name: 'September', value: 9 },\n    { name: 'October', value: 10 },\n    { name: 'November', value: 11 },\n    { name: 'December', value: 12 },\n  ];\n\n  const yearOptions = generateYearOptions(initialValues.year);\n  const currentMonth = generateCurrentMonth(month, options);\n\n  return (\n    <>\n      <TableContainer>\n        <Formik initialValues={initialValues}>\n          <StyledForm>\n            <FieldContainer>\n              <StyledField\n                options={options}\n                labelField=\"name\"\n                valueField=\"value\"\n                onChange={onMonthChange}\n                placeholder={currentMonth}\n              />\n            </FieldContainer>\n            <ErrorMessage name=\"month\" />\n            <FieldContainer>\n              <StyledField\n                options={yearOptions.map(year => ({ value: year }))}\n                labelField=\"value\"\n                valueField=\"value\"\n                placeholder={year}\n                onChange={onYearChange}\n              ></StyledField>\n            </FieldContainer>\n          </StyledForm>\n        </Formik>\n        {isSuccess && !totalExpenses && !totalIncome ? null : (\n          <Tabl>\n            <TableHead>\n              <TableHeadTr>\n                <TabHeader>Category</TabHeader>\n                <TabHeader>Sum</TabHeader>\n              </TableHeadTr>\n            </TableHead>\n            <TableBody>\n              {totalCategories.map(category => (\n                <BodyTr key={category.id}>\n                  <Tabrow>\n                    <p\n                      style={{\n                        backgroundColor: category.color,\n                        width: '30px',\n                        height: '30px',\n                      }}\n                    ></p>\n                    <BodyText>{category.title}</BodyText>\n                  </Tabrow>\n                  <Tabrow></Tabrow>\n                  <Tabrow>\n                    <BodyText>{category.total ? category.total : 0}</BodyText>\n                  </Tabrow>\n                </BodyTr>\n              ))}\n            </TableBody>\n          </Tabl>\n        )}\n        <Total>\n          Expenses:\n          <TotalExpenses>{totalExpenses}</TotalExpenses>\n        </Total>\n        <Total>\n          Income: <TotalIncome>{totalIncome}</TotalIncome>\n        </Total>\n      </TableContainer>\n    </>\n  );\n}\n\nfunction generateCurrentMonth(month, options) {\n  let currentMonth = options.filter(e => e.value === month);\n\n  return currentMonth[0].name;\n}\n\nfunction generateYearOptions(currentYear) {\n  let yearOptions = [];\n  for (let i = 2017; i <= currentYear; i += 1) {\n    yearOptions.push(i);\n  }\n  return yearOptions;\n}\n","import styled from 'styled-components';\n\nexport const StatisticsContainer = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  flex-grow: 1;\n\n  @media screen and (max-width: 768px) {\n    padding-top: 0;\n  }\n\n  @media screen and (min-width: 1279px) {\n    padding-top: 30px;\n    margin-left: 138px;\n  }\n\n  h2 {\n    width: 100%;\n    margin-bottom: 20px;\n    font-style: normal;\n    font-weight: 400;\n    font-size: 30px;\n    line-height: 45px;\n  }\n\n  p {\n    width: 100%;\n  }\n`;\n","import Notiflix from 'notiflix';\nimport { useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Chart } from 'components/chart/chart';\nimport { Table } from 'components/table/table';\nimport { useGetStatisticsMutation } from 'redux/transactionsSlice';\nimport { StatisticsContainer } from './diagramTab.styled';\n\nconst initialValues = {\n  month: new Date().getMonth() + 1,\n  year: new Date().getFullYear(),\n};\n\nexport function DiagramTab() {\n  const statistics = useSelector(state => state.userInformation.financeData);\n  const [month, setMonth] = useState(initialValues.month);\n  const [year, setYear] = useState(initialValues.year);\n\n  const [getStatistics, { isSuccess }] = useGetStatisticsMutation();\n\n  Notiflix.Notify.merge({\n    timeout: 4000,\n    width: '300 px',\n    useIcon: true,\n    fontSize: '12px',\n    distance: '90px',\n    clickToClose: true,\n  });\n  useEffect(() => {\n    getStatistics({ month, year }).then(({ data }) => {\n      const { totalExpenses, totalIncome } = data[0];\n      if (!totalExpenses && !totalIncome) {\n        Notiflix.Notify.warning(\n          'There are no transactions in the selected period'\n        );\n      }\n    });\n  }, [month, year, getStatistics]);\n\n  const handleMonthChange = e => {\n    setMonth(Number(e[0].value));\n  };\n  const handleYearChange = e => {\n    setYear(Number(e[0].value));\n  };\n\n  return (\n    <>\n      <StatisticsContainer>\n        <h2>Statistics</h2>\n\n        {statistics && isSuccess && (\n          <>\n            {statistics?.totalIncome || statistics?.totalExpenses ? (\n              statistics?.totalExpenses ? (\n                <Chart statistics={statistics} />\n              ) : (\n                <p>There are no expenses in the selected period</p>\n              )\n            ) : null}\n\n            <Table\n              month={month}\n              year={year}\n              initialValues={initialValues}\n              statistics={statistics}\n              onMonthChange={handleMonthChange}\n              onYearChange={handleYearChange}\n              isSuccess={isSuccess}\n            />\n          </>\n        )}\n      </StatisticsContainer>\n    </>\n  );\n}\n\nexport default DiagramTab;\n"],"names":["ChartWrapper","styled","ChartBalInfo","Chart","statistics","totalExpenses","totalCategories","data","labels","map","category","title","datasets","label","total","backgroundColor","color","borderWidth","cutout","ChartJS","ArcElement","Tooltip","Tabl","StyledForm","Form","StyledField","Select","TabHeader","TableHead","TableHeadTr","Tabrow","Total","TotalExpenses","TotalIncome","TableBody","BodyTr","BodyText","FieldContainer","TableContainer","Table","month","year","initialValues","onMonthChange","onYearChange","isSuccess","totalIncome","options","name","value","yearOptions","currentYear","i","push","generateYearOptions","currentMonth","filter","e","generateCurrentMonth","labelField","valueField","onChange","placeholder","style","width","height","id","StatisticsContainer","Date","getMonth","getFullYear","DiagramTab","useSelector","state","userInformation","financeData","useState","setMonth","setYear","useGetStatisticsMutation","getStatistics","Notiflix","timeout","useIcon","fontSize","distance","clickToClose","useEffect","then","Number"],"sourceRoot":""}